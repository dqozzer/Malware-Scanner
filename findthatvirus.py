import hashlib
import os
from functools import partial
from os.path import join, getsize
import os.path
import time

debug = False
#debug mode to allow me to have if statements which can be turned on and off depending whether the above line is true or false
print ""
print "Please read the user manual before continuing..."
print ""
def choosemode():
        print "Enter the drive you would like to scan e.g C:\Windows\ or E:\. If you would like to perform a full system scan enter 'C:\' "
        c = raw_input('Enter Drive:') #asking for the drive to scan and setting it to a variable
        try:
                os.chdir(c) # changing to the drive which you wish to scan
        except:
                return "Drive not ready to scan, please select a drive in use"
        #if the drive you select is not a valid drive, return this message
       
	

#set this as a class as it contains files at some point but not private as it is used by the other class
def md5sum(filename):
        
        try:
                f = open(filename, mode='rb')
#opening the filename taken as an argument to the function from the recursive for loop in the function below, and reading the binary
#so as it takes an md5 of the actual file rather then the file name
                d = hashlib.md5() # calling the 
                for buf in iter(partial(f.read, 128), b''):
                        #reads the first 128 bits of the file to get the md5
                        d.update(buf)
                return d.hexdigest()#the funtion returns the md5 fucntion
        except:
                return "This file is currently running, Cannot take a hash of it."
	
#writing functions so I can test them individually
# The above fucntion has been modified from here
# http://stackoverflow.com/questions/7829499/using-hashlib-to-compute-md5-digest-of-a-file-in-python-3


numberscanned = []
log = []
numberoflog = []
#defining lists that are to store values to be calculated at the end and to be used in the fucntion below
print ""
        
class recursion:  #creating a class to store 
        def locatevirus(self): #creating a function or 'method'
        # creating functions in classes require the parameter of self
                for root, dirs, files in os.walk("./"): #uses os.walk to go through the directories 
                        for filename in files: # for loop that goes through each file in the directory
                                print filename, # printing the filename out on the same line as it's md5 sum
                                m = md5sum(os.path.join(root, filename))
                                #calling the md5 function above to calculate the md5 of each file in the for loop
                                print m
                                print ""
                                # calling the md5 function 
                                f = open('virusfiles.txt', 'r') #opening the text document of virus files with the md5 files in them
                                listofmd5 = list(f) #making a list out of the md5's in the virus md5 text file
                                numberscanned.append(1) #adding a number to the list each time a file is scanned for the total count
                                if debug: print listofmd5 # debug feature to test the output of a list
                                for virus in listofmd5: # a nested for loop to go through the list of md5's made from the text file
                                        if debug: print virus
                                        #if the debug mode is set to true this will run to allow me to see what its reading from the file.
                                        if(m in virus):
# compare the calculated md5 with the list of md5's (using in not =) from the text document due to /n being in the list due to it adding new lines in the text file
                                                numberoflog.append(1) # appening to a list each time a virus is found so that 
                                                print "-----------------------------------------"
                                                print "Found a virus"
                                                print "-----------------------------------------"
                                                print  "Filename of Virus = " + filename
                                                filepath = (os.path.join(root, filename)) #calculating the path of the file
                                                print "Path to infected file = " + filepath
                                                print "-----------------------------------------"
                                                print ""
                                                time.sleep(5) #if a virus file is found pause the screen for 5 seconds for live analysis
                                                log.append(filepath) # appending the filepath of the located viruses to print at the end
                                                f.close() #important to close to stop memory leaks


choosemode() #calling the choosemode function
recall2 = recursion() 
#creating an object for the class recursion to be able to access and call my listandfind function
path = "./"			
recall2.locatevirus()
#using the object created above to call the function to scan the system
print ""
print ""
print ""
numberoffilesscanned = len(numberscanned)
#setting a variable which uses len to count how many 1's are in the list which were added in the for loop
print "Number of files scanned on your system = %d "  % numberoffilesscanned
#printing out the lists of total files scanned and and the number of viruses found 
print ""
noofvirusesfound = len(numberoflog)
print "Number of viruses found = %d " % noofvirusesfound
print ""
if (len(log)>0): # if there are infected files in the list 'log'
        for foundvirus in log: # go through each virus path in the list
                namesofviruses = foundvirus
                print "-----------------------------------------"
                print "Virus file found = %s \n" % namesofviruses # print out the filepath of each infected file
                print "-----------------------------------------"
print ""
raw_input ("Scan Finished, press enter to exit") #halting the code with a raw input so the window does not close straight away.
